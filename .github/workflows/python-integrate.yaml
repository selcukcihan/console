# PR's only

name: "Python: Integrate"

on:
  push:
    branches: [ main ]
    paths:
      - python/**
      - proto/**

jobs:
  linuxPython39:
    name: "[Linux] Python 3.9: Unit Tests"
    runs-on: ubuntu-latest
    outputs:
      pathChangedAwsLambdaSdk: ${{ steps.pathChanges.outputs.awsLambdaSdk }}
      pathChangedSdk: ${{ steps.pathChanges.outputs.sdk}}
      pathChangedSdkSchema: ${{ steps.pathChanges.outputs.sdkSchema}}
      pathChangedProto: ${{ steps.pathChanges.outputs.proto }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Resolve path filters
        uses: dorny/paths-filter@v2
        id: pathChanges
        with:
          filters: |
            awsLambdaSdk:
              - 'python/packages/aws-lambda-sdk/**'
            sdk:
              - 'python/packages/sdk/**'
            sdkSchema:
              - 'python/packages/sdk-schema/**'
            proto:
              - 'proto/**'

      - name: Install Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

          # ensure project dependencies are cached
          # When using only `pyproject.toml` for dependencies, see:
          #  https://github.com/actions/setup-python/issues/529#issuecomment-1367029699
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml

      - name: Install SDK project and dependencies
        if: steps.pathChanges.outputs.sdk == 'true'
        run: |
          cd python/packages/sdk

          python3 -m pip install --editable .

      - name: Unit tests /sdk
        if: steps.pathChanges.outputs.sdk == 'true'
        run: |
          cd python/packages/sdk
          python3 -m pip install pytest
          python3 -m pytest

      - name: Buf Setup
        if: steps.pathChanges.outputs.sdkSchema == 'true' || steps.pathChanges.outputs.proto == 'true'
        uses: bufbuild/buf-setup-action@v1
      - name: Buf Lint
        if: steps.pathChanges.outputs.proto == 'true'
        uses: bufbuild/buf-lint-action@v1
        with:
          input: "proto"
      - name: Build Protobufs
        if: steps.pathChanges.outputs.sdkSchema == 'true' || steps.pathChanges.outputs.proto == 'true'
        run: |
          cd ./proto
          python3 -m pip install "betterproto[compiler]"
          buf generate --template=buf.gen.python.yaml 

      - name: Install SDK Schema
        if: steps.pathChanges.outputs.sdkSchema == 'true' || steps.pathChanges.outputs.proto == 'true'
        run: |
          cd python/packages/sdk-schema

          python3 -m pip install poethepoet
          python3 -m poethepoet install

      - name: Run SDK Schema unit tests
        if: steps.pathChanges.outputs.sdkSchema == 'true' || steps.pathChanges.outputs.proto == 'true'
        run: |
          cd python/packages/sdk-schema

          python3 -m pip install poethepoet pytest
          python3 -m poethepoet test

      - name: Install AWS Lambda SDK project and dependencies
        if: steps.pathChanges.outputs.awsLambdaSdk == 'true'
        run: |
          cd python/packages/aws-lambda-sdk

          python3 -m pip install --editable .

      - name: Unit tests /aws-lambda-sdk
        if: steps.pathChanges.outputs.awsLambdaSdk == 'true'
        run: |
          cd python/packages/aws-lambda-sdk
          python3 -m pip install pytest
          python3 -m pytest

  integratePythonSdk:
    name: Integrate Python SDK
    runs-on: ubuntu-latest
    needs: [ linuxPython39 ]
    if: needs.linuxPython39.outputs.pathChangedSdk == 'true'
    timeout-minutes: 5 # Default is 360
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # Ensure to have complete history of commits pushed with given push operation
          # It's loose and imperfect assumption that no more than 30 commits will be pushed at once
          fetch-depth: 30
          # Tag needs to be pushed with real user token, otherwise pushed tag won't trigger the actions workflow
          # Hence we're passing 'serverless-ci' user authentication token
          token: ${{ secrets.USER_GITHUB_TOKEN }}

      - name: Tag if new version
        run: |
          NEW_VERSION=`git diff -U0 ${{ github.event.before }} python/packages/sdk/pyproject.toml | grep 'version = ' | tail -n 1 | grep -oE "[0-9]+\.[0-9]+\.[0-9]+"` || :
          if [ -n "$NEW_VERSION" ] && [ $NEW_VERSION != "0.0.0" ];
          then
            git tag python/serverless-sdk@$NEW_VERSION
            git push --tags
          fi

  integrateAwsLambdaSdk:
    name: Integrate Python AWS Lambda SDK
    runs-on: ubuntu-latest
    needs: [ linuxPython39 ]
    if: needs.linuxPython39.outputs.pathChangedAwsLambdaSdk == 'true'
    timeout-minutes: 5 # Default is 360
    env:
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SLS_ORG_ID: ${{ secrets.SLS_ORG_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # Ensure to have complete history of commits pushed with given push operation
          # It's loose and imperfect assumption that no more than 30 commits will be pushed at once
          fetch-depth: 30
          # Tag needs to be pushed with real user token, otherwise pushed tag won't trigger the actions workflow
          # Hence we're passing 'serverless-ci' user authentication token
          token: ${{ secrets.USER_GITHUB_TOKEN }}

      - name: Install Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml

      - name: Install AWS Lambda SDK project and dependencies
        run: |
          cd python/packages/aws-lambda-sdk
          python3 -m pip install . --target=dist

      - name: Install Node.js and npm
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org

      - name: Install integration script dependencies
        run: |
          cd node
          npm update --save-dev --no-save

      - name: Integration tests
        run: |
          cd node
          npx mocha test/python/aws-lambda-sdk/integration.test.js

      - name: Tag if new version
        run: |
          NEW_VERSION=`git diff -U0 ${{ github.event.before }} python/packages/aws-lambda-sdk/pyproject.toml | grep 'version = ' | tail -n 1 | grep -oE "[0-9]+\.[0-9]+\.[0-9]+"` || :
          if [ -n "$NEW_VERSION" ] && [ $NEW_VERSION != "0.0.0" ];
          then
            git tag python/serverless-aws-lambda-sdk@$NEW_VERSION
            git push --tags
          fi

  integratePythonSdkSchema:
    name: Integrate Python SDK Schema
    runs-on: ubuntu-latest
    needs: [ linuxPython39 ]
    if: needs.linuxPython39.outputs.pathChangedSdkSchema == 'true'
    timeout-minutes: 5 # Default is 360
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # Ensure to have complete history of commits pushed with given push operation
          # It's loose and imperfect assumption that no more than 30 commits will be pushed at once
          fetch-depth: 30
          # Tag needs to be pushed with real user token, otherwise pushed tag won't trigger the actions workflow
          # Hence we're passing 'serverless-ci' user authentication token
          token: ${{ secrets.USER_GITHUB_TOKEN }}

      - name: Tag if new version
        run: |
          NEW_VERSION=`git diff -U0 ${{ github.event.before }} python/packages/sdk-schema/pyproject.toml | grep 'version = ' | tail -n 1 | grep -oE "[0-9]+\.[0-9]+\.[0-9]+"` || :
          if [ -n "$NEW_VERSION" ] && [ $NEW_VERSION != "0.0.0" ];
          then
            git tag python/serverless-sdk-schema@$NEW_VERSION
            git push --tags
          fi
